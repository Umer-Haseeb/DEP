#Initializations and importing raw data for training model

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns
import gradio as gr
from sklearn import metrics

raw_data = pd.read_csv('raw_data.csv')
raw_data['Brick'] = raw_data['Brick'].map({'Yes': 1, 'No': 0})
raw_data.info()
sns.pairplot(raw_data)

sns.boxplot(raw_data['SqFt'])

#Identifying and removing outliers

upper_limit = raw_data['SqFt'].mean() + 2.6*raw_data['SqFt'].std()
lower_limit = raw_data['SqFt'].mean() - 2.6*raw_data['SqFt'].std()
print (f'The upper limit of usable data is: {upper_limit}')
print (f'The lower limit of usable data is: {lower_limit}')
data = raw_data.loc[(raw_data['SqFt'] < upper_limit) & (raw_data['SqFt'] > lower_limit)]
print (f'The outliers are: ')
print (f'{raw_data.loc[(raw_data['SqFt'] > upper_limit) | (raw_data['SqFt'] < lower_limit)]}')
x = data[['SqFt', 'Bedrooms', 'Bathrooms', 'Offers', 'Brick']]
y = data['Price']

#Training and testing the linear regression model

x_train = x[ :100]
x_test = x[80: ]
y_train = y[ :100]
y_test = y[80: ]

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x_train, y_train)
prediction_test = model.predict(x_test)
plt.scatter(y_test, prediction_test)

#Different metrics for the model

mae = metrics.mean_absolute_error(y_test, prediction_test)
mse = metrics.mean_squared_error(y_test, prediction_test)
rmse = np.sqrt(metrics.mean_squared_error(y_test, prediction_test))
print(f'Mean Absolute Error: {mae}')
print(f'Mean Squared Error: {mse}')
print(f'Root Mean Squared Error: {rmse}')

Percen_Err = (y_test - prediction_test)/y_test * 100
Abs_Percn_Err = np.abs(Percen_Err)
print (f'Accuracy of the model is: {100 - np.mean(Abs_Percn_Err)}')

#Defining new function for predicring the price

def predict_price(SqFt, Dedrooms, Bathrooms, Offers, Brick):
    test = np.array([SqFt, Dedrooms, Bathrooms, Offers, Brick]).reshape(1, -1)
    test_df = pd.DataFrame(test, columns = x.columns)
    prediction = model.predict(test_df)
    return prediction
print (f'The predicted price is: {predict_price(2000, 3, 3, 3, 0)}')

# Creating Gradio interface for the model
inputs = [
    gr.Number(label="SqFt"),
    gr.Number(label="Bedrooms"),
    gr.Number(label="Bathrooms"),
    gr.Number(label="Offers"),
    gr.Radio(['Yes', 'No'], label="Brick", type="index")
]

outputs = gr.Textbox(label="Predicted Price (USD)")

gr.Interface(fn=predict_price, inputs=inputs, outputs=outputs, title="House Price Predictor", description="Predict the price of a house based on its features.").launch(share=True)